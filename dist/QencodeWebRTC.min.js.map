{"version":3,"file":"QencodeWebRTC.min.js","mappings":"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","sources":["webpack://QencodeWebRTC/webpack/universalModuleDefinition","webpack://QencodeWebRTC/webpack/bootstrap","webpack://QencodeWebRTC/webpack/runtime/define property getters","webpack://QencodeWebRTC/webpack/runtime/hasOwnProperty shorthand","webpack://QencodeWebRTC/./src/QencodeWebRTC.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"QencodeWebRTC\"] = factory();\n\telse\n\t\troot[\"QencodeWebRTC\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const QencodeWebRTC = {};\r\n\r\nconst logHeader = 'QencodeWebRTC.js :';\r\nconst logEventHeader = 'QencodeWebRTC.js :';\r\n\r\n// private methods\r\nfunction sendMessage(webSocket, message) {\r\n\r\n    if (webSocket) {\r\n        webSocket.send(JSON.stringify(message));\r\n    }\r\n}\r\n\r\nfunction generateDomainFromUrl(url) {\r\n    let result = '';\r\n    let match;\r\n    if (match = url.match(/^(?:wss?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:\\/\\n\\?\\=]+)/im)) {\r\n        result = match[1];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction findIp(string) {\r\n\r\n    let result = '';\r\n    let match;\r\n\r\n    if (match = string.match(new RegExp('\\\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\b', 'gi'))) {\r\n        result = match[0];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction checkIOSVersion() {\r\n    var agent = window.navigator.userAgent,\r\n        start = agent.indexOf('OS ');\r\n    if ((agent.indexOf('iPhone') > -1 || agent.indexOf('iPad') > -1) && start > -1) {\r\n        return window.Number(agent.substr(start + 3, 3).replace('_', '.'));\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getFormatNumber(sdp, format) {\r\n\r\n    const lines = sdp.split('\\n');\r\n    let formatNumber = -1;\r\n\r\n    for (let i = 0; i < lines.length - 1; i++) {\r\n\r\n        lines[i] = lines[i].toLowerCase();\r\n\r\n        if (lines[i].indexOf('a=rtpmap') > -1 && lines[i].indexOf(format.toLowerCase()) > -1) {\r\n            // parsing \"a=rtpmap:100 H264/90000\" line\r\n            formatNumber = lines[i].split(' ')[0].split(':')[1];\r\n            break;\r\n        }\r\n    }\r\n\r\n    return formatNumber;\r\n}\r\n\r\nfunction removeFormat(sdp, formatNumber) {\r\n    let newLines = [];\r\n    let lines = sdp.split('\\n');\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n\r\n        if (lines[i].indexOf('m=video') === 0) {\r\n            newLines.push(lines[i].replace(' ' + formatNumber + '', ''));\r\n        } else if (lines[i].indexOf(formatNumber + '') > -1) {\r\n\r\n        } else {\r\n            newLines.push(lines[i]);\r\n        }\r\n    }\r\n\r\n    return newLines.join('\\n')\r\n}\r\n\r\nasync function getStreamForDeviceCheck() {\r\n\r\n    // High resolution video constraints makes browser to get maximum resolution of video device.\r\n    const constraints = {\r\n        audio: { deviceId: undefined },\r\n        video: { deviceId: undefined, width: 1920, height: 1080 }\r\n    };\r\n\r\n    return await navigator.mediaDevices.getUserMedia(constraints);\r\n}\r\n\r\nasync function getDevices() {\r\n\r\n    return await navigator.mediaDevices.enumerateDevices();\r\n\r\n\r\n}\r\n\r\nfunction gotDevices(deviceInfos) {\r\n\r\n    let devices = {\r\n        'audioinput': [],\r\n        'audiooutput': [],\r\n        'videoinput': [],\r\n        'other': [],\r\n    };\r\n\r\n    for (let i = 0; i !== deviceInfos.length; ++i) {\r\n\r\n        const deviceInfo = deviceInfos[i];\r\n\r\n        let info = {};\r\n\r\n        info.deviceId = deviceInfo.deviceId;\r\n\r\n        if (deviceInfo.kind === 'audioinput') {\r\n\r\n            info.label = deviceInfo.label || `microphone ${devices.audioinput.length + 1}`;\r\n            devices.audioinput.push(info);\r\n        } else if (deviceInfo.kind === 'audiooutput') {\r\n\r\n            info.label = deviceInfo.label || `speaker ${devices.audiooutput.length + 1}`;\r\n            devices.audiooutput.push(info);\r\n        } else if (deviceInfo.kind === 'videoinput') {\r\n\r\n            info.label = deviceInfo.label || `camera ${devices.videoinput.length + 1}`;\r\n            devices.videoinput.push(info);\r\n        } else {\r\n\r\n            info.label = deviceInfo.label || `other ${devices.other.length + 1}`;\r\n            devices.other.push(info);\r\n        }\r\n    }\r\n\r\n    return devices;\r\n}\r\n\r\nfunction initConfig(instance, options) {\r\n\r\n    instance.stream = null;\r\n    instance.webSocket = null;\r\n    instance.peerConnection = null;\r\n    instance.connectionConfig = {};\r\n\r\n    instance.status = 'creating';\r\n\r\n    instance.videoElement = null;\r\n    instance.connectionUrl = null;\r\n\r\n    if (options && options.callbacks) {\r\n\r\n        instance.callbacks = options.callbacks;\r\n    } else {\r\n        instance.callbacks = {};\r\n    }\r\n\r\n}\r\n\r\nfunction addMethod(instance) {\r\n\r\n    function errorHandler(error) {\r\n\r\n        if (instance.callbacks.error) {\r\n\r\n            instance.callbacks.error(error);\r\n        }\r\n    }\r\n\r\n    function getUserMedia(constraints) {\r\n\r\n        if (!constraints) {\r\n\r\n            constraints = {\r\n                video: {\r\n                    deviceId: undefined\r\n                },\r\n                audio: {\r\n                    deviceId: undefined\r\n                }\r\n            };\r\n        }\r\n\r\n        console.info(logHeader, 'Requested Constraint To Input Devices', constraints);\r\n\r\n        return navigator.mediaDevices.getUserMedia(constraints)\r\n            .then(function (stream) {\r\n\r\n                console.info(logHeader, 'Received Media Stream From Input Device', stream);\r\n\r\n                instance.stream = stream;\r\n\r\n                let elem = instance.videoElement;\r\n\r\n                // Attach stream to video element when video element is provided.\r\n                if (elem) {\r\n\r\n                    elem.srcObject = stream;\r\n\r\n                    elem.onloadedmetadata = function (e) {\r\n\r\n                        elem.play();\r\n                    };\r\n                }\r\n\r\n                return new Promise(function (resolve) {\r\n\r\n                    resolve(stream);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n\r\n                console.error(logHeader, 'Can\\'t Get Media Stream From Input Device', error);\r\n                errorHandler(error);\r\n\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(error);\r\n                });\r\n            });\r\n    }\r\n\r\n    function getDisplayMedia(constraints) {\r\n\r\n        if (!constraints) {\r\n            constraints = {};\r\n        }\r\n\r\n        console.info(logHeader, 'Requested Constraint To Display', constraints);\r\n\r\n        return navigator.mediaDevices.getDisplayMedia(constraints)\r\n            .then(function (stream) {\r\n\r\n                console.info(logHeader, 'Received Media Stream From Display', stream);\r\n\r\n                instance.stream = stream;\r\n\r\n                let elem = instance.videoElement;\r\n\r\n                // Attach stream to video element when video element is provided.\r\n                if (elem) {\r\n\r\n                    elem.srcObject = stream;\r\n\r\n                    elem.onloadedmetadata = function (e) {\r\n\r\n                        elem.play();\r\n                    };\r\n                }\r\n\r\n                return new Promise(function (resolve) {\r\n\r\n                    resolve(stream);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n\r\n                console.error(logHeader, 'Can\\'t Get Media Stream From Display', error);\r\n                errorHandler(error);\r\n\r\n                return new Promise(function (resolve, reject) {\r\n                    reject(error);\r\n                });\r\n            });\r\n    }\r\n\r\n    // From https://webrtchacks.com/limit-webrtc-bandwidth-sdp/\r\n    function setBitrateLimit(sdp, media, bitrate) {\r\n\r\n        let lines = sdp.split('\\n');\r\n        let line = -1;\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].indexOf('m=' + media) === 0) {\r\n                line = i;\r\n                break;\r\n            }\r\n        }\r\n        if (line === -1) {\r\n            // Could not find the m line for media\r\n            return sdp;\r\n        }\r\n\r\n        // Pass the m line\r\n        line++;\r\n\r\n        // Skip i and c lines\r\n        while (lines[line].indexOf('i=') === 0 || lines[line].indexOf('c=') === 0) {\r\n\r\n            line++;\r\n        }\r\n\r\n        // If we're on a b line, replace it\r\n        if (lines[line].indexOf('b') === 0) {\r\n\r\n            lines[line] = 'b=AS:' + bitrate;\r\n\r\n            return lines.join('\\n');\r\n        }\r\n\r\n        // Add a new b line\r\n        let newLines = lines.slice(0, line)\r\n\r\n        newLines.push('b=AS:' + bitrate)\r\n        newLines = newLines.concat(lines.slice(line, lines.length))\r\n\r\n        return newLines.join('\\n')\r\n    }\r\n\r\n    function initWebSocket(connectionUrl) {\r\n\r\n        if (!connectionUrl) {\r\n            errorHandler('connectionUrl is required');\r\n            return;\r\n        }\r\n\r\n        instance.connectionUrl = connectionUrl;\r\n\r\n        let webSocket = null;\r\n\r\n        try {\r\n\r\n            webSocket = new WebSocket(connectionUrl);\r\n        } catch (error) {\r\n\r\n            errorHandler(error);\r\n        }\r\n\r\n\r\n        instance.webSocket = webSocket;\r\n\r\n        webSocket.onopen = function () {\r\n\r\n            // Request offer at the first time.\r\n            sendMessage(webSocket, {\r\n                command: 'request_offer'\r\n            });\r\n        };\r\n\r\n        webSocket.onmessage = function (e) {\r\n\r\n            let message = JSON.parse(e.data);\r\n\r\n            if (message.error) {\r\n                console.error('webSocket.onmessage', message.error);\r\n                errorHandler(message.error);\r\n            }\r\n\r\n            if (message.command === 'offer') {\r\n\r\n                // OME returns offer. Start create peer connection.\r\n                createPeerConnection(\r\n                    message.id,\r\n                    message.peer_id,\r\n                    message.sdp,\r\n                    message.candidates,\r\n                    message.ice_servers\r\n                );\r\n            }\r\n        };\r\n\r\n        webSocket.onerror = function (error) {\r\n\r\n            console.error('webSocket.onerror', error);\r\n            errorHandler(error);\r\n        };\r\n\r\n        webSocket.onclose = function (e) {\r\n\r\n            if (!instance.removing) {\r\n\r\n                if (instance.callbacks.connectionClosed) {\r\n\r\n                    instance.callbacks.connectionClosed('websocket', e);\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    function appendFmtp(sdp) {\r\n\r\n        const fmtpStr = instance.connectionConfig.sdp.appendFmtp;\r\n\r\n        const lines = sdp.split('\\n');\r\n        const payloads = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n\r\n            if (lines[i].indexOf('m=video') === 0) {\r\n\r\n                let tokens = lines[i].split(' ')\r\n\r\n                for (let j = 3; j < tokens.length; j++) {\r\n\r\n                    payloads.push(tokens[j].replace('\\r', ''));\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < payloads.length; i++) {\r\n\r\n            let fmtpLineFound = false;\r\n\r\n            for (let j = 0; j < lines.length; j++) {\r\n\r\n                if (lines[j].indexOf('a=fmtp:' + payloads[i]) === 0) {\r\n                    fmtpLineFound = true;\r\n                    lines[j] += ';' + fmtpStr;\r\n                }\r\n            }\r\n\r\n            if (!fmtpLineFound) {\r\n\r\n                for (let j = 0; j < lines.length; j++) {\r\n\r\n                    if (lines[j].indexOf('a=rtpmap:' + payloads[i]) === 0) {\r\n\r\n                        lines[j] += '\\na=fmtp:' + payloads[i] + ' ' + fmtpStr;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return lines.join('\\n')\r\n    }\r\n\r\n    function createPeerConnection(id, peerId, offer, candidates, iceServers) {\r\n\r\n        window.connectionData = {\r\n            id,\r\n            peerId\r\n        }\r\n\r\n        let peerConnectionConfig = {};\r\n\r\n        if (instance.connectionConfig.iceServers) {\r\n\r\n            // first priority using ice servers from local config.\r\n            peerConnectionConfig.iceServers = instance.connectionConfig.iceServers;\r\n\r\n            if (instance.connectionConfig.iceTransportPolicy) {\r\n\r\n                peerConnectionConfig.iceTransportPolicy = instance.connectionConfig.iceTransportPolicy;\r\n            }\r\n        } else if (iceServers) {\r\n\r\n            // second priority using ice servers from ome and force using TCP\r\n            peerConnectionConfig.iceServers = [];\r\n\r\n            for (let i = 0; i < iceServers.length; i++) {\r\n\r\n                let iceServer = iceServers[i];\r\n\r\n                let regIceServer = {};\r\n\r\n                regIceServer.urls = iceServer.urls;\r\n\r\n                let hasWebSocketUrl = false;\r\n                let webSocketUrl = generateDomainFromUrl(instance.connectionUrl);\r\n\r\n                for (let j = 0; j < regIceServer.urls.length; j++) {\r\n\r\n                    let serverUrl = regIceServer.urls[j];\r\n\r\n                    if (serverUrl.indexOf(webSocketUrl) > -1) {\r\n                        hasWebSocketUrl = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!hasWebSocketUrl) {\r\n\r\n                    if (regIceServer.urls.length > 0) {\r\n\r\n                        let cloneIceServer = regIceServer.urls[0];\r\n                        let ip = findIp(cloneIceServer);\r\n\r\n                        if (webSocketUrl && ip) {\r\n                            regIceServer.urls.push(cloneIceServer.replace(ip, webSocketUrl));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                regIceServer.username = iceServer.user_name;\r\n                regIceServer.credential = iceServer.credential;\r\n\r\n                peerConnectionConfig.iceServers.push(regIceServer);\r\n            }\r\n\r\n            peerConnectionConfig.iceTransportPolicy = 'relay';\r\n        } else {\r\n            // last priority using default ice servers.\r\n\r\n            if (instance.iceTransportPolicy) {\r\n\r\n                peerConnectionConfig.iceTransportPolicy = instance.iceTransportPolicy;\r\n            }\r\n        }\r\n\r\n        let advancedSetting = {\r\n            optional: [\r\n                {\r\n                    googHighStartBitrate: {\r\n                        exact: !0\r\n                    }\r\n                },\r\n                {\r\n                    googPayloadPadding: {\r\n                        exact: !0\r\n                    }\r\n                },\r\n                {\r\n                    googScreencastMinBitrate: {\r\n                        exact: 500\r\n                    }\r\n                },\r\n                {\r\n                    enableDscp: {\r\n                        exact: true\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n\r\n        console.info(logHeader, 'Create Peer Connection With Config', peerConnectionConfig);\r\n\r\n        let peerConnection = new RTCPeerConnection(peerConnectionConfig);\r\n\r\n        instance.peerConnection = peerConnection;\r\n\r\n        // set local stream\r\n        instance.stream.getTracks().forEach(function (track) {\r\n\r\n            console.info(logHeader, 'Add Track To Peer Connection', track);\r\n            peerConnection.addTrack(track, instance.stream);\r\n        });\r\n\r\n\r\n        if (checkIOSVersion() >= 15) {\r\n            const formatNumber = getFormatNumber(offer.sdp, 'H264');\r\n\r\n            if (formatNumber > 0) {\r\n                offer.sdp = removeFormat(offer.sdp, formatNumber);\r\n            }\r\n        }\r\n\r\n        if (instance.connectionConfig.maxVideoBitrate) {\r\n\r\n            // if bandwith limit is set. modify sdp from ome to limit acceptable bandwidth of ome\r\n            offer.sdp = setBitrateLimit(offer.sdp, 'video', instance.connectionConfig.maxVideoBitrate);\r\n        }\r\n\r\n        if (instance.connectionConfig.sdp && instance.connectionConfig.sdp.appendFmtp) {\r\n\r\n            offer.sdp = appendFmtp(offer.sdp);\r\n        }\r\n\r\n        peerConnection.setRemoteDescription(new RTCSessionDescription(offer))\r\n            .then(function () {\r\n\r\n                peerConnection.createAnswer()\r\n                    .then(function (answer) {\r\n\r\n                        if (checkIOSVersion() >= 15) {\r\n\r\n                            const formatNumber = getFormatNumber(answer.sdp, 'H264');\r\n\r\n                            if (formatNumber > 0) {\r\n\r\n                                answer.sdp = removeFormat(answer.sdp, formatNumber);\r\n                            }\r\n                        }\r\n\r\n                        if (instance.connectionConfig.sdp && instance.connectionConfig.sdp.appendFmtp) {\r\n\r\n                            answer.sdp = appendFmtp(answer.sdp);\r\n                        }\r\n\r\n                        peerConnection.setLocalDescription(answer)\r\n                            .then(function () {\r\n\r\n                                sendMessage(instance.webSocket, {\r\n                                    id: id,\r\n                                    peer_id: peerId,\r\n                                    command: 'answer',\r\n                                    sdp: answer\r\n                                });\r\n                            })\r\n                            .catch(function (error) {\r\n\r\n                                console.error('peerConnection.setLocalDescription', error);\r\n                                errorHandler(error);\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n\r\n                        console.error('peerConnection.createAnswer', error);\r\n                        errorHandler(error);\r\n                    });\r\n            })\r\n            .catch(function (error) {\r\n\r\n                console.error('peerConnection.setRemoteDescription', error);\r\n                errorHandler(error);\r\n            });\r\n\r\n        if (candidates) {\r\n\r\n            addIceCandidate(peerConnection, candidates);\r\n        }\r\n\r\n        peerConnection.onicecandidate = function (e) {\r\n\r\n            if (e.candidate && e.candidate.candidate) {\r\n\r\n                console.info(logHeader, 'Candidate Sent', '\\n', e.candidate.candidate, '\\n', e);\r\n\r\n                sendMessage(instance.webSocket, {\r\n                    id: id,\r\n                    peer_id: peerId,\r\n                    command: 'candidate',\r\n                    candidates: [e.candidate]\r\n                });\r\n            }\r\n        };\r\n\r\n        peerConnection.oniceconnectionstatechange = function (e) {\r\n\r\n            let state = peerConnection.iceConnectionState;\r\n\r\n            if (instance.callbacks.iceStateChange) {\r\n\r\n                console.info(logHeader, 'ICE State', '[' + state + ']');\r\n                instance.callbacks.iceStateChange(state);\r\n            }\r\n\r\n            if (state === 'connected') {\r\n\r\n                if (instance.callbacks.connected) {\r\n\r\n                    console.info(logHeader, 'Iceconnection Connected', e);\r\n                    instance.callbacks.connected(e);\r\n                }\r\n            }\r\n\r\n            if (state === 'failed' || state === 'disconnected' || state === 'closed') {\r\n\r\n                if (instance.callbacks.connectionClosed) {\r\n\r\n                    console.error(logHeader, 'Iceconnection Closed', e);\r\n                    instance.callbacks.connectionClosed('ice', e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addIceCandidate(peerConnection, candidates) {\r\n\r\n        for (let i = 0; i < candidates.length; i++) {\r\n\r\n            if (candidates[i] && candidates[i].candidate) {\r\n\r\n                let basicCandidate = candidates[i];\r\n\r\n                peerConnection.addIceCandidate(new RTCIceCandidate(basicCandidate))\r\n                    .then(function () {\r\n\r\n                    })\r\n                    .catch(function (error) {\r\n\r\n                        console.error('peerConnection.addIceCandidate', error);\r\n                        errorHandler(error);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    // instance methods\r\n    instance.attachMedia = function (videoElement) {\r\n\r\n        instance.videoElement = videoElement;\r\n    };\r\n\r\n    instance.getUserMedia = function (constraints) {\r\n\r\n        return getUserMedia(constraints);\r\n    };\r\n\r\n    instance.getDisplayMedia = function (constraints) {\r\n\r\n        return getDisplayMedia(constraints);\r\n    };\r\n\r\n    instance.startStreaming = function (connectionUrl, connectionConfig) {\r\n\r\n        connectionUrl+=\"?direction=send&transport=tcp\"\r\n\r\n        console.info(logEventHeader, 'Start Streaming');\r\n\r\n        if (connectionConfig) {\r\n\r\n            instance.connectionConfig = connectionConfig;\r\n        }\r\n\r\n        initWebSocket(connectionUrl);\r\n    };\r\n\r\n    instance.remove = function () {\r\n\r\n        instance.removing = true;\r\n\r\n        // first release peer connection with ome\r\n        if (instance.peerConnection) {\r\n\r\n            // remove tracks from peer connection\r\n            instance.peerConnection.getSenders().forEach(function (sender) {\r\n                instance.peerConnection.removeTrack(sender);\r\n            });\r\n\r\n            instance.peerConnection.close();\r\n            instance.peerConnection = null;\r\n            delete instance.peerConnection;\r\n        }\r\n\r\n        // release video, audio stream\r\n        if (instance.stream) {\r\n\r\n            instance.stream.getTracks().forEach(track => {\r\n\r\n                track.stop();\r\n                instance.stream.removeTrack(track);\r\n            });\r\n\r\n            if (instance.videoElement) {\r\n                instance.videoElement.srcObject = null;\r\n            }\r\n\r\n            instance.stream = null;\r\n            delete instance.stream;\r\n        }\r\n\r\n        // release websocket\r\n        if (instance.webSocket) {\r\n            \r\n            sendMessage(instance.webSocket, {\r\n                id: window.connectionData.id,\r\n                peer_id: window.connectionData.peerId,\r\n                command: 'stop',\r\n            });\r\n\r\n            instance.webSocket.close();\r\n            instance.webSocket = null;\r\n            delete instance.webSocket;\r\n        }\r\n\r\n        instance.status = 'removed';\r\n\r\n        console.info(logEventHeader, 'Removed');\r\n\r\n    };\r\n}\r\n\r\n// static methods\r\nQencodeWebRTC.create = function (options) {\r\n\r\n    console.info(logEventHeader, 'Create WebRTC');\r\n\r\n    let instance = {};\r\n\r\n    instance.removing = false;\r\n\r\n    initConfig(instance, options);\r\n    addMethod(instance);\r\n\r\n    return instance;\r\n};\r\n\r\nQencodeWebRTC.getDevices = async function () {\r\n\r\n    await getStreamForDeviceCheck();\r\n    const deviceInfos = await getDevices();\r\n    return gotDevices(deviceInfos)\r\n};\r\n\r\nexport default QencodeWebRTC;"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","QencodeWebRTC","logHeader","logEventHeader","sendMessage","webSocket","message","send","JSON","stringify","generateDomainFromUrl","url","match","result","findIp","string","RegExp","checkIOSVersion","agent","window","navigator","userAgent","start","indexOf","Number","substr","replace","getFormatNumber","sdp","format","lines","split","formatNumber","i","length","toLowerCase","removeFormat","newLines","push","join","addMethod","instance","errorHandler","error","callbacks","appendFmtp","fmtpStr","connectionConfig","payloads","tokens","j","fmtpLineFound","attachMedia","videoElement","getUserMedia","constraints","video","deviceId","undefined","audio","console","info","mediaDevices","then","stream","elem","srcObject","onloadedmetadata","e","play","Promise","resolve","catch","reject","getDisplayMedia","startStreaming","connectionUrl","WebSocket","onopen","command","onmessage","parse","data","id","peerId","offer","candidates","iceServers","connectionData","peerConnectionConfig","iceTransportPolicy","iceServer","regIceServer","urls","hasWebSocketUrl","webSocketUrl","cloneIceServer","ip","username","user_name","credential","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","maxVideoBitrate","media","bitrate","line","slice","concat","setBitrateLimit","setRemoteDescription","RTCSessionDescription","createAnswer","answer","setLocalDescription","peer_id","candidate","basicCandidate","addIceCandidate","RTCIceCandidate","onicecandidate","oniceconnectionstatechange","state","iceConnectionState","iceStateChange","connected","connectionClosed","createPeerConnection","ice_servers","onerror","onclose","removing","initWebSocket","remove","getSenders","sender","removeTrack","close","stop","status","create","options","initConfig","getDevices","async","width","height","getStreamForDeviceCheck","deviceInfos","devices","deviceInfo","kind","label","audioinput","audiooutput","videoinput","other","gotDevices","enumerateDevices"],"sourceRoot":""}